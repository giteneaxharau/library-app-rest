// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using library_app_rest.Helpers;

#nullable disable

namespace library_app_rest.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.HasKey("BooksId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BookCategory");

                    b.HasData(
                        new
                        {
                            BooksId = new Guid("4872aa25-ae9a-4d95-b506-7fd6f6d9b177"),
                            CategoriesId = 30
                        },
                        new
                        {
                            BooksId = new Guid("8399df5d-3ad1-40bd-b500-c6c4cffbf2b8"),
                            CategoriesId = 31
                        },
                        new
                        {
                            BooksId = new Guid("d2a41262-df58-420f-ab4a-79911de5b831"),
                            CategoriesId = 32
                        },
                        new
                        {
                            BooksId = new Guid("1ff28426-38f8-43d7-9b8f-0bbc91c3c15d"),
                            CategoriesId = 33
                        },
                        new
                        {
                            BooksId = new Guid("241a88d4-3fcd-4915-afdb-8f9747f15277"),
                            CategoriesId = 34
                        },
                        new
                        {
                            BooksId = new Guid("59caa319-0f00-4c4c-8748-8aaea82b4f80"),
                            CategoriesId = 35
                        },
                        new
                        {
                            BooksId = new Guid("db7dad26-3b8e-446a-b913-d7d3755f2b2a"),
                            CategoriesId = 36
                        },
                        new
                        {
                            BooksId = new Guid("9b9a343c-7039-4a47-aea3-61b1943146ad"),
                            CategoriesId = 37
                        },
                        new
                        {
                            BooksId = new Guid("0ddac854-f77a-4d88-a1c3-90cac09406d7"),
                            CategoriesId = 38
                        },
                        new
                        {
                            BooksId = new Guid("e49c6b04-e861-482d-b37e-e02c3d302b3e"),
                            CategoriesId = 39
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("library_app_rest.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4872aa25-ae9a-4d95-b506-7fd6f6d9b177"),
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 271, DateTimeKind.Local).AddTicks(9751),
                            CreatedBy = "Hailee Becker",
                            Description = "Eum molestias aliquid.",
                            Name = "Licensed Steel Cheese",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8399df5d-3ad1-40bd-b500-c6c4cffbf2b8"),
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(752),
                            CreatedBy = "Brooklyn Rosenbaum",
                            Description = "Eum placeat cumque.",
                            Name = "Incredible Cotton Sausages",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d2a41262-df58-420f-ab4a-79911de5b831"),
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(816),
                            CreatedBy = "Verda Hoppe",
                            Description = "Nemo aliquam et quas natus quia et.",
                            Name = "Gorgeous Fresh Cheese",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1ff28426-38f8-43d7-9b8f-0bbc91c3c15d"),
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(870),
                            CreatedBy = "Pascale Aufderhar",
                            Description = "Aut veritatis quibusdam.",
                            Name = "Sleek Concrete Hat",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("241a88d4-3fcd-4915-afdb-8f9747f15277"),
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(915),
                            CreatedBy = "Sonny Conn",
                            Description = "Aut odio qui perferendis inventore non vel architecto rem.",
                            Name = "Refined Frozen Mouse",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("59caa319-0f00-4c4c-8748-8aaea82b4f80"),
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(978),
                            CreatedBy = "Emelie Effertz",
                            Description = "Et minima est ut id incidunt vitae vero eos.",
                            Name = "Refined Steel Shirt",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("db7dad26-3b8e-446a-b913-d7d3755f2b2a"),
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(1061),
                            CreatedBy = "Salma Sporer",
                            Description = "Voluptatem aut eaque.",
                            Name = "Handmade Granite Sausages",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9b9a343c-7039-4a47-aea3-61b1943146ad"),
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(1099),
                            CreatedBy = "Gerson Balistreri",
                            Description = "Est non ut itaque provident.",
                            Name = "Licensed Frozen Chicken",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0ddac854-f77a-4d88-a1c3-90cac09406d7"),
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(1142),
                            CreatedBy = "Christy Reynolds",
                            Description = "Dolorem ea laborum dolor voluptatem soluta deserunt non voluptatem quo.",
                            Name = "Generic Cotton Bike",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e49c6b04-e861-482d-b37e-e02c3d302b3e"),
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(1196),
                            CreatedBy = "Annabelle Keebler",
                            Description = "Qui sequi architecto aut quibusdam recusandae fugiat.",
                            Name = "Intelligent Concrete Pants",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("library_app_rest.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(1365),
                            CreatedBy = "Federico Lemke",
                            Name = "Health",
                            Priority = 10,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(1995),
                            CreatedBy = "Araceli Hackett",
                            Name = "Industrial",
                            Priority = 5,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(2020),
                            CreatedBy = "Macey Kreiger",
                            Name = "Computers",
                            Priority = 6,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(2036),
                            CreatedBy = "Holden Torphy",
                            Name = "Health",
                            Priority = 2,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(2051),
                            CreatedBy = "Mabel Wilkinson",
                            Name = "Movies",
                            Priority = 2,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(2068),
                            CreatedBy = "Iva Skiles",
                            Name = "Shoes",
                            Priority = 5,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(2081),
                            CreatedBy = "Madonna Collier",
                            Name = "Baby",
                            Priority = 3,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(2099),
                            CreatedBy = "Keanu Rosenbaum",
                            Name = "Clothing",
                            Priority = 6,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(2113),
                            CreatedBy = "Chad Casper",
                            Name = "Kids",
                            Priority = 9,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2023, 3, 15, 15, 56, 44, 272, DateTimeKind.Local).AddTicks(2127),
                            CreatedBy = "Lincoln Huels",
                            Name = "Electronics",
                            Priority = 5,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("library_app_rest.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.HasOne("library_app_rest.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("library_app_rest.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("library_app_rest.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("library_app_rest.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("library_app_rest.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("library_app_rest.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
