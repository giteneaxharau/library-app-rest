// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using library_app_rest.Helpers;

#nullable disable

namespace library_app_rest.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("library_app_rest.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f36d1aea-a95c-466a-8dd2-2db51d4d5011"),
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(6255),
                            CreatedBy = "Courtney Sawayn",
                            Description = "Accusamus iure quidem consequatur repellendus in et porro minus.",
                            Name = "Sleek Soft Towels",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("eaa16645-7f36-4040-a60e-57410dcfcaca"),
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(7257),
                            CreatedBy = "Garland Will",
                            Description = "Ratione fuga voluptatem beatae voluptas dolores aut temporibus.",
                            Name = "Licensed Fresh Soap",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ca3e2962-eec9-4c46-ba53-dfd9c82535cc"),
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(7333),
                            CreatedBy = "Reagan Bailey",
                            Description = "Qui explicabo omnis omnis modi.",
                            Name = "Practical Metal Cheese",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("01288c4d-8755-4783-a80d-23467ed6ab0b"),
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(7484),
                            CreatedBy = "Mike Ziemann",
                            Description = "Aut minima recusandae ea amet dolorum natus sit deleniti.",
                            Name = "Awesome Fresh Chair",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("15e9e105-907f-4bb9-a70a-46cbe1c829fa"),
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(7551),
                            CreatedBy = "Orie Harber",
                            Description = "Similique vitae ut aut qui voluptatibus nihil saepe.",
                            Name = "Intelligent Concrete Gloves",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d6400fea-09a7-45e5-abd3-b878ba4dafb6"),
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(7605),
                            CreatedBy = "Dock Larkin",
                            Description = "Omnis totam placeat maxime.",
                            Name = "Fantastic Soft Ball",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("aa745f3f-2f1c-447e-b147-c20752051ff1"),
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(7653),
                            CreatedBy = "Gregg Stokes",
                            Description = "Ab aut quam.",
                            Name = "Practical Rubber Salad",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e4e253ab-b717-48ab-bf24-637d1ce1bcac"),
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(7693),
                            CreatedBy = "Gilberto Little",
                            Description = "Et voluptas asperiores nobis molestias.",
                            Name = "Awesome Fresh Gloves",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cf3a13ba-6455-452e-b878-8672a66785cc"),
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(7759),
                            CreatedBy = "Madisen Dickens",
                            Description = "Aperiam libero impedit eaque reprehenderit corporis enim.",
                            Name = "Refined Wooden Salad",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("823a980a-86a4-439d-9f64-8a4e564a0946"),
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(7859),
                            CreatedBy = "Kaylee Kilback",
                            Description = "Aliquam dicta laborum accusamus sit expedita quis eum.",
                            Name = "Fantastic Plastic Shoes",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("library_app_rest.Models.BookCategory", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BooksCategories");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("f36d1aea-a95c-466a-8dd2-2db51d4d5011"),
                            CategoryId = 30
                        },
                        new
                        {
                            BookId = new Guid("eaa16645-7f36-4040-a60e-57410dcfcaca"),
                            CategoryId = 31
                        },
                        new
                        {
                            BookId = new Guid("ca3e2962-eec9-4c46-ba53-dfd9c82535cc"),
                            CategoryId = 32
                        },
                        new
                        {
                            BookId = new Guid("01288c4d-8755-4783-a80d-23467ed6ab0b"),
                            CategoryId = 33
                        },
                        new
                        {
                            BookId = new Guid("15e9e105-907f-4bb9-a70a-46cbe1c829fa"),
                            CategoryId = 34
                        },
                        new
                        {
                            BookId = new Guid("d6400fea-09a7-45e5-abd3-b878ba4dafb6"),
                            CategoryId = 35
                        },
                        new
                        {
                            BookId = new Guid("aa745f3f-2f1c-447e-b147-c20752051ff1"),
                            CategoryId = 36
                        },
                        new
                        {
                            BookId = new Guid("e4e253ab-b717-48ab-bf24-637d1ce1bcac"),
                            CategoryId = 37
                        },
                        new
                        {
                            BookId = new Guid("cf3a13ba-6455-452e-b878-8672a66785cc"),
                            CategoryId = 38
                        },
                        new
                        {
                            BookId = new Guid("823a980a-86a4-439d-9f64-8a4e564a0946"),
                            CategoryId = 39
                        });
                });

            modelBuilder.Entity("library_app_rest.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(8049),
                            CreatedBy = "Kory Balistreri",
                            Name = "Tools",
                            Priority = 5,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(8904),
                            CreatedBy = "Royal Medhurst",
                            Name = "Movies",
                            Priority = 9,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(8929),
                            CreatedBy = "Nathaniel Steuber",
                            Name = "Outdoors",
                            Priority = 9,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(8950),
                            CreatedBy = "Shyann Runte",
                            Name = "Computers",
                            Priority = 5,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(8963),
                            CreatedBy = "Garland Hansen",
                            Name = "Automotive",
                            Priority = 4,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(8979),
                            CreatedBy = "Zackery Greenfelder",
                            Name = "Home",
                            Priority = 8,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(8997),
                            CreatedBy = "Marta Hyatt",
                            Name = "Games",
                            Priority = 4,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(9012),
                            CreatedBy = "Maci Herman",
                            Name = "Computers",
                            Priority = 2,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(9028),
                            CreatedBy = "Lexie Bechtelar",
                            Name = "Computers",
                            Priority = 10,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2023, 3, 14, 13, 10, 49, 690, DateTimeKind.Local).AddTicks(9042),
                            CreatedBy = "Salma Beer",
                            Name = "Games",
                            Priority = 7,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("library_app_rest.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("library_app_rest.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("library_app_rest.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("library_app_rest.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("library_app_rest.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("library_app_rest.Models.BookCategory", b =>
                {
                    b.HasOne("library_app_rest.Models.Book", "Book")
                        .WithMany("BooksCategories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("library_app_rest.Models.Category", "Category")
                        .WithMany("BooksCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("library_app_rest.Models.Book", b =>
                {
                    b.Navigation("BooksCategories");
                });

            modelBuilder.Entity("library_app_rest.Models.Category", b =>
                {
                    b.Navigation("BooksCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
